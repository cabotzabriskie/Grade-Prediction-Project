library(psych)
library(psych)
require(qgraph)
libPath
.libPaths()
require(qgraph)
updata.packages(ask=FALSE, checkBuilt = TRUE)
update.packages(ask=FALSE, checkBuilt = TRUE)
library(psych)
install.packages("psych")
library(psych)
require(qgraph)
library("survival")
library("survminer")
#We will use the built in "lung" dataset
library("survival")
res.cox <- coxph(Surv(time, status) ~ age + sex + wt.loss, data =  lung)
res.cox
test.ph <- cox.zph(res.cox)
test.ph
ggcoxzph(test.ph)
bodhi<-Surv(data$time, data$status)
library(MASS)
plot(survfit(Surv(lung$time, lung$status)~ lung$sex), col = c("red","blue"), fun = "cloglog")
res<-residuals(res.cox, type = "martingale")
X<-as.data.frame(lung[,c("age","wt.loss")])
X<-X[!is.na(X$wt.loss),]
X<-as.matrix(X)
for (j in 1:2) { # residual plots
plot(X[, j], res, xlab=c("age","wt.loss")[j], ylab="residuals")
abline(h=0, lty=2)
lines(lowess(X[, j], res, iter=0))
}
b <- coef(res.cox)[c(1,3)] # regression coefficients
for (j in 1:2) { # component-plus-residual plots
plot(X[, j], b[j]*X[, j] + res, xlab=c("age", "wt.loss")[j],
ylab="component+residual")
abline(lm(b[j]*X[, j] + res ~ X[, j]), lty=2)
lines(lowess(X[, j], b[j]*X[, j] + res, iter=0))
}
head(lung)
head(rossi)
url <- "http://socserv.mcmaster.ca/jfox/Books/Companion/data/Rossi.txt"
Rossi <- read.table(url, header=TRUE)
Rossi[1:5, 1:10]
write.csv(Rossi, "sample data", row.names = F)
write.csv(Rossi, "sample data.csv", row.names = F)
write.csv(Rossi, "sample data.csv")
rossi2<-Rossi[Rossi$arrest==0,]
table(rossi2$week)
survobj<-Surv(week,arrest)
modeluniv<-coxph(survobj~race, data = Rossi)
survobj<-Surv(Rossi$week,Rossi$arrest)
modeluniv<-coxph(survobj~race, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~prio, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~prio, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~prio, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~race, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~age, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~wexp, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~mar, data = Rossi)
summary(modeluniv)
modeluniv<-coxph(survobj~paro, data = Rossi)
summary(modeluniv)
model<-coxph(survobj ~ age + wexp + mar + prio, data = Rossi)
summary(model)
plot(survfit(model), ylim = c(0.7,1), xlab = "Weeks", ylab = "Proportion Not Rearrested")
unfold <- function (data, time, event, cov, cov.names = paste("covariate",
".", 1:ncovs, sep = ""), suffix = ".time", cov.times = 0:ncov,
common.times = TRUE, lag = 0, ...) {
vlag <- function(x, lag) c(rep(NA, lag), x[1:(length(x) -
lag)])
xlag <- function(x, lag) apply(as.matrix(x), 2, vlag, lag = lag)
all.cov <- unlist(cov)
if (!is.numeric(all.cov))
all.cov <- which(is.element(names(data), all.cov))
if (!is.list(cov))
cov <- list(cov)
ncovs <- length(cov)
nrow <- nrow(data)
ncol <- ncol(data)
ncov <- length(cov[[1]])
nobs <- nrow * ncov
if (length(unique(c(sapply(cov, length), length(cov.times) -
1))) > 1)
stop(paste("all elements of cov must be of the same length and \n",
"cov.times must have one more entry than each element of cov."))
var.names <- names(data)
subjects <- rownames(data)
omit.cols <- if (!common.times)
c(all.cov, cov.times)
else all.cov
keep.cols <- (1:ncol)[-omit.cols]
factors <- names(data)[keep.cols][sapply(data[keep.cols],
is.factor)]
levels <- lapply(data[factors], levels)
first.covs <- sapply(cov, function(x) x[1])
factors.covs <- which(sapply(data[first.covs], is.factor))
levels.covs <- lapply(data[names(factors.covs)], levels)
nkeep <- length(keep.cols)
if (is.numeric(event))
event <- var.names[event]
events <- sort(unique(data[[event]]))
if (length(events) > 2 || (!is.numeric(events) && !is.logical(events)))
stop("event indicator must have values {0, 1}, {1, 2} or {FALSE, TRUE}")
if (!(all(events == 0:1) || all(events == c(FALSE, TRUE)))) {
if (all(events = 1:2))
data[[event]] <- data[[event]] - 1
else stop("event indicator must have values {0, 1}, {1, 2} or {FALSE, TRUE}")
}
times <- if (common.times)
matrix(cov.times, nrow, ncov + 1, byrow = TRUE)
else data[, cov.times]
new.data <- matrix(Inf, nobs, 3 + ncovs + nkeep)
rownames <- rep("", nobs)
colnames(new.data) <- c("start", "stop", paste(event, suffix,
sep = ""), var.names[-omit.cols], cov.names)
end.row <- 0
data <- as.matrix(as.data.frame(lapply(data, as.numeric)))
for (i in 1:nrow) {
start.row <- end.row + 1
end.row <- end.row + ncov
start <- times[i, 1:ncov]
stop <- times[i, 2:(ncov + 1)]
event.time <- ifelse(stop == data[i, time] & data[i,
event] == 1, 1, 0)
keep <- matrix(data[i, -omit.cols], ncov, nkeep, byrow = TRUE)
select <- apply(matrix(!is.na(data[i, all.cov]), ncol = ncovs),
1, all)
rows <- start.row:end.row
cov.mat <- xlag(matrix(data[i, all.cov], nrow = length(rows)),
lag)
new.data[rows[select], ] <- cbind(start, stop, event.time,
keep, cov.mat)[select, ]
rownames[rows] <- paste(subjects[i], ".", seq(along = rows),
sep = "")
}
row.names(new.data) <- rownames
new.data <- as.data.frame(new.data[new.data[, 1] != Inf &
apply(as.matrix(!is.na(new.data[, cov.names])), 1, all),
])
for (fac in factors) {
new.data[[fac]] <- factor(levels[[fac]][new.data[[fac]]])
}
fcv <- 0
for (cv in factors.covs) {
fcv <- fcv + 1
new.data[[cov.names[cv]]] <- factor(levels.covs[[fcv]][new.data[[cov.names[cv]]]])
}
new.data
}
Rossi.2 <- unfold(Rossi, time="week",
event="arrest", cov=11:62, cov.names="employed")
Rossi.2 <- unfold(Rossi, time="week",
event="arrest", cov=11:62, cov.names="employed")
write.csv(Rossi.2,"CountingProcessData.csv")
library(survival)
url <- "http://socserv.mcmaster.ca/jfox/Books/Companion/data/Rossi.txt"
Rossi <- read.table(url, header=TRUE)
survobj<-Surv(Rossi$week,Rossi$arrest)
library(titanic)
data<-titanic_train
summary(data$Age)
summary(data$SibSp)
summary(data$Parch)
summary(data$Ticket)
summary(data$Fare)
summary(data$Cabin)
summary(data$Embarked)
table(data$Embarked)
data<-titanic_train
data<-subset(data, !is.na(Age))
data$Sex_Num<-0
for(i in 1:nrow(data)){
if(data$Sex[i] == "male") data$Sex_Num<-1
}
plot(data$Survived)
fit<-lm(Survived ~ Pclass + Sex_Num + Age + SibSp + Parch + Fare)
fit<-lm(Survived ~ Pclass + Sex_Num + Age + SibSp + Parch + Fare, data = data)
abline(lm(Survived ~ Pclass + Sex_Num + Age + SibSp + Parch + Fare, data = data))
abline(lm(Survived ~ Age, data = data))
abline(lm(Survived ~ Fare, data = data))
abline(lm(Survived ~ 1, data = data))
abline(lm(Survived ~ 2*index, data = data))
abline(a = 1, b =2)
plot(data$Survived)
abline(lsfit(1:10, sale5))
abline(a = -.2, b = 1)
abline(a = -.2, b = 6)
abline(a = -.2, b = .2)
abline(a = -.2, b = .02)
abline(a = -.2, b = .002)
plot(data$Survived)
abline(a = -.2, b = .002)
plot(data$Survived, main = "Plot of Survival")
plot(data$Survived, main = "Plot of Survival", xlab = "Index Number", ylab = "Dichotomous Survival Code")
abline(a = -.2, b = .002)
plot(log(x/1-x))
x<-c(1:100)
plot(log(x/1-x))
plot(y~log(x/1-x))
y<-log(x/1-x)
plot(y))
plot(y)
y
x<-c(-5:5, .1)
test<-rnorm(20,30,2)
test<-sort(test)
survive<-c(0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1)
dat<-as.data.frame(cbine(test, survive))
dat<-as.data.frame(cbind(test, survive))
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
glm(survive ~ test, family = binomial, dat)
curve(predict(g,data.frame(test = x), type = "resp"), add = TRUE)
g<-glm(survive ~ test, family = binomial, dat)
curve(predict(g,data.frame(test = x), type = "resp"), add = TRUE)
test<-rnorm(-5,5,0.1)
test<-sort(test)
survive<-c(0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1)
test<-rnorm(-5,5,1)
test<-rnorm(100,0,5)
test<-sort(test)
survive<-c(0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1)
dat<-as.data.frame(cbind(test, survive))
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
View(dat)
plot(test, survive,data = dat, xlab = "Index", ylab = "Probability of Survival")
View(dat)
test<-rnorm(20,0,5)
test<-sort(test)
survive<-c(0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1)
dat<-as.data.frame(cbind(test, survive))
plot(test, survive,data = dat, xlab = "Index", ylab = "Probability of Survival")
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
warnings()
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
test<-rnorm(20,0,5)
test<-sort(test)
survive<-c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
dat<-as.data.frame(cbind(test, survive))
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
g<-glm(survive ~ test, family = binomial, dat)
curve(predict(g,data.frame(test = x), type = "resp"), add = TRUE)
test<-rnorm(20,0,5)
test<-sort(test)
survive<-c(0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1)
dat<-as.data.frame(cbind(test, survive))
plot(test, survive, xlab = "Index", ylab = "Probability of Survival")
g<-glm(survive ~ test, family = binomial, dat)
curve(predict(g,data.frame(test = x), type = "resp"), add = TRUE)
plot(data$Survived, main = "Plot of Survival", xlab = "Index Number", ylab = "Dichotomous Survival Code")
g<-glm(survive ~ Fare, family = binomial, data)
g<-glm(survive ~ Sex_Num), family = binomial, data)
plot(test, survive, xlab = "Index", ylab = "Probability of Survival", main = "Logistic Survival")
g<-glm(survive ~ test, family = binomial, dat)
curve(predict(g,data.frame(test = x), type = "resp"), add = TRUE)
table(data$Sex)
table(data$Sex, data$Survive)
ptable(data$Sex, data$Survive)
prop.table(data$Sex, data$Survive)
table(data$Sex, data$Survive)
prop.table(data$Sex, data$Survive)
library("mirt")
data<-expand.table(LSAT7)
mod1<-mirt(data,1)
summary(mod1)
mod1<-mirt(data = data[,1:3],1)
mod1
summary(mod1)
data[,1:3]
mod1<-mirt(data = data[,1:4],2)
mod1<-mirt(data = data[,1:5],2)
mod1<-mirt(data = data,2)
mod1<-mirt(data,2)
mod1<-mirt(data,1)
mod1<-mirt(data = data,1)
mod1<-mirt(data = data[1:3],1)
test<-data[1:3]
mod2<-mirt(data = test,1)
model1<-c("Item.1","Item.3","Item.5")
mod3<-mirt(data = data[colnames(data) %%in%% model1],1)
mod3<-mirt(data = data[colnames(data) %in% model1],1)
summary(mod3)
summary(mod2)
summary(mod``)
mod3<-mirt(data = data[colnames(data) %in% model1],2)
mod3<-mirt(data = data[colnames(data) %in% model1],1)
mod4<-mirt(data, 3)
mod4<-mirt(data, 2)
summary(mod4)
mod4$group
View(mod4)
mod4@Model[["factorNames"]]
mod4@Model[["factorNames"]]<-"First"
mod4@Model[["factorNames"]]
mod4@Model[["factorNames"]]<-c("First","Second")
mod4@Model[["factorNames"]]
summary*mod4
summary(mod4)
mod4@Model[["factorNames"]]
View(mod4)
mod4
summary(mod4)
mod4<-mirt(data, 2)
View(mod4)
mod4@Model[["factorNames"]]
s<-'Factor1 = 1,2,3,4,5
Factor2 = 1,2,3,4,5'
model<-mirt.model(s)
mod<-mirt(data, model)
summary(mod)
s<-'Idiot_Box = 1,2,3,4,5
Genius_Box = 1,2,3,4,5'
model<-mirt.model(s)
mod<-mirt(data, model)
summary(mod)
update.packages()
y
y
library(randomForest)
library(caret)
library(mlbench)
library(psych)
library(rpart)
library(rpart.plot)
library(rattle)
library(car)
require(rms)
library(lmtest)
library(qgraph)
library(gvlma)
library(simpleboot)
setwd("~/Research/Grade Prediction Project/R Analysis")
library(caret)
library(car)
library(pscl)
library(ROCR)
library(pROC)
library(glmnet)
library(plotmo)
library(randomForest)
library(varSelRF)
library(MASS)
wk1<-read.csv("Intermediate-Data/Week_1_data.csv", stringsAsFactors = F)
wk1$dup1<-duplicated(wk1$Username, fromLast=F)
wk1<-subset(wk1, !is.na(LabSection))
wk1<-subset(wk1, dup1!=TRUE)
reg<-read.csv("Intermediate-Data/RegistrarData.csv", stringsAsFactors = F)
#agg<-read.csv("Intermediate-Data/AggregatedData-PHYS111-112-F15-S18-6-3-2018.csv", stringsAsFactors = F)
#agg<-subset(agg, Course == 112)
#agg<-subset(agg, SemesterNum > 11)
#agg$SemesterNum<-as.character(agg$SemesterNum)
#agg$SemesterNum<-ifelse(agg$SemesterNum == "15", "S18", agg$SemesterNum)
#agg$SemesterNum<-ifelse(agg$SemesterNum == "14", "F17", agg$SemesterNum)
#agg$SemesterNum<-ifelse(agg$SemesterNum == "13", "S17", agg$SemesterNum)
#agg$SemesterNum<-ifelse(agg$SemesterNum == "12", "F16", agg$SemesterNum)
#agg$Semester<-agg$SemesterNum
#agg2<-agg[c("Username","Semester","IsFall","IsHonors","Gender","CitzCode",
#           "TAexperience","PhysicsGradeSimple")]
#agg2<-agg[c("Username","Semester","IsFall","IsHonors","Gender","CitzCode",
#          "TAexperience","PhysicsGradeSimple")]
data<-merge(wk1, reg, by = "Username", all.y = T)
#data<-merge(data, agg2, by = c("Username","Semester"), all.x = T)
datasave<-data
rm(reg,wk1)
data<-subset(data, !is.na(HSGPA))
data<-subset(data, !is.na(ACTSATM))
#data$FinalCourseGradeAB_Rest<-ifelse(data$FinalCourseGradeAB_Rest == "AB", 1, 0)
#data$FinalCourseGradeAB_Rest2<-as.factor(data$FinalCourseGradeAB_Rest)
#data$TakeCSEM<-as.factor(data$TakeCSEM)
#############
#New Vars----
#############
lecQs<-grep(".*(LecQ).", names(data))
labQs<-grep(".*(LabQ).", names(data))
labs<-grep(".*(Lab\\d).*", names(data))
Fhwks<-grep(".*(FHwk).", names(data))
LecMiss<-grep(".*(Lec)\\d(Miss).*", names(data))
LabMiss<-grep(".*(Lab)\\d(Miss).*", names(data))
Sbonus<-grep(".*(SBonus)\\d.*", names(data))
labs<-setdiff(labs, LabMiss)
data$LecQGrade<-rowMeans(subset(data, select = lecQs), na.rm = T)
data$LecQGrade<-ifelse(is.na(data$LecQGrade), 0, data$LecQGrade)
data$LabQGrade<-rowMeans(subset(data, select = labQs), na.rm = T)
data$LabQGrade<-ifelse(is.na(data$LabQGrade), 0, data$LabQGrade)
data$LabGrade<-rowMeans(subset(data, select = labs), na.rm = T)
data$LabGrade<-ifelse(is.na(data$LabGrade), 0, data$LabGrade)
data$HWGrade<-rowMeans(subset(data, select = Fhwks), na.rm = T)
data$HWGrade<-ifelse(is.na(data$HWGrade), 0, data$HWGrade)
data$MissLect<-rowSums(subset(data, select = LecMiss), na.rm = T)
data$MissLab<-rowSums(subset(data, select = LabMiss), na.rm = T)
data$MissAnyLectures<-ifelse(data$MissLect > 0, "Y","N")
data$MissAnyLabs<-ifelse(data$MissLab > 0, "Y","N")
data$BonusPoints<-rowMeans(subset(data, select = Sbonus), na.rm = T)
data$BonusPoints<-ifelse(is.na(data$BonusPoints), 0, data$BonusPoints)
data$BonusPointsTot<-rowSums(subset(data, select = Sbonus), na.rm = T)
data$BonusPointsTot<-ifelse(is.na(data$BonusPointsTot), 0, data$BonusPointsTot)
data$MathEntry<-as.factor(data$MathEntry)
#####################
#Train Test Split----
#####################
set.seed(416)
#train_index <- sample(1:nrow(data), 0.63 * nrow(data))
#test_index <- setdiff(1:nrow(data), train_index)
#write.csv(train_index,"Intermediate-Data/train_index.csv", row.names = F)
#write.csv(test_index,"Intermediate-Data/test_index.csv", row.names = F)
trI<-as.vector(read.csv("Intermediate-Data/train_index.csv", stringsAsFactors = F))
teI<-as.vector(read.csv("Intermediate-Data/test_index.csv", stringsAsFactors = F))
train_index<-trI[,1]
test_index<-teI[,1]
train<-data[train_index,]
test<-data[test_index,]
#############
#Analysis Registrar Variables----
#############
TestActual<-ifelse(test$FinalCourseGradeAB_Rest == "AB", 1,0)
train$FinalCourseGradeAB_Rest2<-ifelse(train$FinalCourseGradeAB_Rest == "AB",1,0)
test$FinalCourseGradeAB_Rest2<-ifelse(test$FinalCourseGradeAB_Rest == "AB",1,0)
train$TakeCSEM2<-ifelse(train$TakeCSEM == "Y",1,0)
test$TakeCSEM2<-ifelse(test$TakeCSEM == "Y",1,0)
fit<-randomForest(as.factor(train$FinalCourseGradeAB_Rest2) ~
P111LastGradeAB_Rest  +
P111WVUCount  +
P112FirstAttempt  +
CURGPA  +
HSGPA  +
ACTSATM +
ACTSATV +
Cal1LastGradeAB_Rest +
Cal1WVUCount +
CUREnroll +
CURAZcount  +
APCount +
APCredit  +
IsFirstFall +
IsFirstGen +
MathEntry +
CURCMP, data = train, importance = TRUE, ntree = 10000)
fit$importanceSD
varImpPlot(fit)
